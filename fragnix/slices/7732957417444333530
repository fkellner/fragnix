{"sliceID":7732957417444333530,"fragment":[" \ndata Tree a = Node{rootLabel :: a, subForest :: Forest a}\n            deriving (Eq, Read, Show, Data)"," \ninstance Foldable Tree where\n        foldMap f (Node x ts) = f x `mappend` foldMap (foldMap f) ts"," \ninstance Traversable Tree where\n        traverse f (Node x ts) = Node <$> f x <*> traverse (traverse f) ts"," \ninstance Monad Tree where\n        return x = Node x []\n        Node x ts >>= f = Node x' (ts' ++ map (>>= f) ts)\n          where Node x' ts' = f x"," \ninstance Applicative Tree where\n        pure x = Node x []\n        Node f tfs <*> tx@(Node x txs)\n          = Node (f x) (map (f <$>) txs ++ map (<*> tx) tfs)"," \ninstance Functor Tree where\n        fmap f (Node x ts) = Node (f x) (map (fmap f) ts)"," \nderiving instance Typeable Tree"," \ntype Forest a = [Tree a]"],"usages":[{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Eq"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"typeIdentifier":"Read"},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"typeIdentifier":"Show"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"typeIdentifier":"Data"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"typeIdentifier":"Foldable"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldMap"},"qualification":null},{"reference":{"originalModule":"Data.Monoid"},"usedName":{"valueIdentifier":"mappend"},"qualification":null},{"reference":{"originalModule":"Data.Traversable"},"usedName":{"typeIdentifier":"Traversable"},"qualification":null},{"reference":{"originalModule":"Data.Traversable"},"usedName":{"valueIdentifier":"traverse"},"qualification":null},{"reference":{"originalModule":"Data.Functor"},"usedName":{"valueOperator":"<$>"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueOperator":"<*>"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Monad"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"return"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">>="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"++"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"map"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"typeIdentifier":"Applicative"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueIdentifier":"pure"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Functor"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"fmap"},"qualification":null},{"reference":{"originalModule":"Data.Typeable.Internal"},"usedName":{"typeIdentifier":"Typeable"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving"]}