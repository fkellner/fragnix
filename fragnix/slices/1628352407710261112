{"sliceID":1628352407710261112,"fragment":[" \nfromList :: [a] -> Seq a","fromList = Data.List.foldl' (|>) empty"," \n(|>) :: Seq a -> a -> Seq a","Seq xs |> x = Seq (xs `snocTree` Elem x)"," \nviewl :: Seq a -> ViewL a","viewl (Seq xs)\n  = case viewLTree xs of\n        Nothing2 -> EmptyL\n        Just2 (Elem x) xs' -> x :< Seq xs'"," \n(<|) :: a -> Seq a -> Seq a","x <| Seq xs = Seq (Elem x `consTree` xs)"," \nlength :: Seq a -> Int","length (Seq xs) = size xs"," \nnull :: Seq a -> Bool","null (Seq Empty) = True\nnull _ = False"," \n(><) :: Seq a -> Seq a -> Seq a","Seq xs >< Seq ys = Seq (appendTree0 xs ys)"," \nreplicateA :: Applicative f => Int -> f a -> f (Seq a)","replicateA n x\n  | n >= 0 = Seq <$> applicativeTree n 1 (Elem <$> x)\n  | otherwise =\n    error \"replicateA takes a nonnegative integer argument\""," \nreplicate :: Int -> a -> Seq a","replicate n x\n  | n >= 0 = runId (replicateA n (Id x))\n  | otherwise =\n    error \"replicate takes a nonnegative integer argument\""," \nsingleton :: a -> Seq a","singleton x = Seq (Single (Elem x))"," \nempty :: Seq a","empty = Seq Empty"," \nnewtype Seq a = Seq (FingerTree (Elem a))"," \ninstance Read a => Read (Seq a) where\n        readPrec\n          = parens $\n              prec 10 $\n                do Ident \"fromList\" <- lexP\n                   xs <- readPrec\n                   return (fromList xs)\n        readListPrec = readListPrecDefault"," \ndata ViewR a = EmptyR\n             | Seq a :> a\n             deriving (Eq, Ord, Show, Read, Data)"," \ninstance Traversable ViewR where\n        traverse _ EmptyR = pure EmptyR\n        traverse f (xs :> x) = (:>) <$> traverse f xs <*> f x"," \ninstance Foldable ViewR where\n        foldr _ z EmptyR = z\n        foldr f z (xs :> x) = foldr f (f x z) xs\n        foldl _ z EmptyR = z\n        foldl f z (xs :> x) = foldl f z xs `f` x\n        foldr1 _ EmptyR = error \"foldr1: empty view\"\n        foldr1 f (xs :> x) = foldr f x xs"," \ninstance Functor ViewR where\n         \n        {-# INLINE fmap #-}\n        fmap _ EmptyR = EmptyR\n        fmap f (xs :> x) = fmap f xs :> f x"," \nderiving instance Typeable ViewR"," \ninfixl 5 |>, :>"," \ninstance Data a => Data (Seq a) where\n        gfoldl f z s\n          = case viewl s of\n                EmptyL -> z empty\n                x :< xs -> z (<|) `f` x `f` xs\n        gunfold k z c\n          = case constrIndex c of\n                1 -> z empty\n                2 -> k (k (z (<|)))\n                _ -> error \"gunfold\"\n        toConstr xs\n          | null xs = emptyConstr\n          | otherwise = consConstr\n        dataTypeOf _ = seqDataType\n        dataCast1 f = gcast1 f"," \ndata ViewL a = EmptyL\n             | a :< Seq a\n             deriving (Eq, Ord, Show, Read, Data)"," \ninstance Traversable ViewL where\n        traverse _ EmptyL = pure EmptyL\n        traverse f (x :< xs) = (:<) <$> f x <*> traverse f xs"," \ninstance Foldable ViewL where\n        foldr _ z EmptyL = z\n        foldr f z (x :< xs) = f x (foldr f z xs)\n        foldl _ z EmptyL = z\n        foldl f z (x :< xs) = foldl f (f z x) xs\n        foldl1 _ EmptyL = error \"foldl1: empty view\"\n        foldl1 f (x :< xs) = foldl f x xs"," \ninstance Functor ViewL where\n         \n        {-# INLINE fmap #-}\n        fmap _ EmptyL = EmptyL\n        fmap f (x :< xs) = f x :< fmap f xs"," \nderiving instance Typeable ViewL"," \ninfixr 5 <|, :<"," \ninstance Eq a => Eq (Seq a) where\n        xs == ys = length xs == length ys && toList xs == toList ys"," \ninstance Functor Seq where\n        fmap f (Seq xs) = Seq (fmap (fmap f) xs)\n        x <$ s = replicate (length s) x"," \ninstance Monoid (Seq a) where\n        mempty = empty\n        mappend = (><)"," \ninstance Alternative Seq where\n        empty = empty\n        (<|>) = (><)"," \ninstance MonadPlus Seq where\n        mzero = empty\n        mplus = (><)"," \ninstance Applicative Seq where\n        pure = singleton\n        fs <*> xs = foldl' add empty fs\n          where add ys f = ys >< fmap f xs"," \ninstance Monad Seq where\n        return = singleton\n        xs >>= f = foldl' add empty xs\n          where add ys x = ys >< f x"," \ninfixr 5 ><"," \nderiving instance Typeable Seq"," \ninstance Show a => Show (Seq a) where\n        showsPrec p xs\n          = showParen (p > 10) $ showString \"fromList \" . shows (toList xs)"," \ninstance Ord a => Ord (Seq a) where\n        compare xs ys = compare (toList xs) (toList ys)"," \ninstance Traversable Seq where\n        traverse f (Seq xs) = Seq <$> traverse (traverse f) xs"," \ninstance Foldable Seq where\n        foldr f z (Seq xs) = foldr (flip (foldr f)) z xs\n        foldl f z (Seq xs) = foldl (foldl f) z xs\n        foldr1 f (Seq xs) = getElem (foldr1 f' xs)\n          where f' (Elem x) (Elem y) = Elem (f x y)\n        foldl1 f (Seq xs) = getElem (foldl1 f' xs)\n          where f' (Elem x) (Elem y) = Elem (f x y)"],"usages":[{"reference":{"otherSlice":2148473566623462179},"usedName":{"typeIdentifier":"FingerTree"},"qualification":null},{"reference":{"otherSlice":3052533278734957531},"usedName":{"typeIdentifier":"Elem"},"qualification":null},{"reference":{"originalModule":"Data.List"},"usedName":{"valueIdentifier":"foldl'"},"qualification":"Data.List"},{"reference":{"originalModule":"Text.Read"},"usedName":{"typeIdentifier":"Read"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"readPrec"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"parens"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"$"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"prec"},"qualification":null},{"reference":{"originalModule":"Text.Read.Lex"},"usedName":{"typeName":"Lexeme","constructorIdentifier":"Ident"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"lexP"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"return"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"readListPrec"},"qualification":null},{"reference":{"originalModule":"Text.Read"},"usedName":{"valueIdentifier":"readListPrecDefault"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Eq"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Ord"},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"typeIdentifier":"Show"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"typeIdentifier":"Data"},"qualification":null},{"reference":{"originalModule":"Data.Traversable"},"usedName":{"typeIdentifier":"Traversable"},"qualification":null},{"reference":{"originalModule":"Data.Traversable"},"usedName":{"valueIdentifier":"traverse"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueIdentifier":"pure"},"qualification":null},{"reference":{"originalModule":"Data.Functor"},"usedName":{"valueOperator":"<$>"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueOperator":"<*>"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"typeIdentifier":"Foldable"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldr"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldl"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldr1"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"error"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Functor"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"fmap"},"qualification":null},{"reference":{"originalModule":"Data.Typeable.Internal"},"usedName":{"typeIdentifier":"Typeable"},"qualification":null},{"reference":{"otherSlice":8284458717546084480},"usedName":{"valueIdentifier":"snocTree"},"qualification":null},{"reference":{"otherSlice":3052533278734957531},"usedName":{"typeName":"Elem","constructorIdentifier":"Elem"},"qualification":null},{"reference":{"otherSlice":5444224950462027387},"usedName":{"valueIdentifier":"viewLTree"},"qualification":null},{"reference":{"otherSlice":4852691830867320328},"usedName":{"typeName":"Maybe2","constructorIdentifier":"Nothing2"},"qualification":null},{"reference":{"otherSlice":4852691830867320328},"usedName":{"typeName":"Maybe2","constructorIdentifier":"Just2"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"gfoldl"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"gunfold"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"constrIndex"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"toConstr"},"qualification":null},{"reference":{"otherSlice":4155476741159790711},"usedName":{"valueIdentifier":"emptyConstr"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"otherSlice":4155476741159790711},"usedName":{"valueIdentifier":"consConstr"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"dataTypeOf"},"qualification":null},{"reference":{"otherSlice":4155476741159790711},"usedName":{"valueIdentifier":"seqDataType"},"qualification":null},{"reference":{"originalModule":"Data.Data"},"usedName":{"valueIdentifier":"dataCast1"},"qualification":null},{"reference":{"originalModule":"Data.Typeable"},"usedName":{"valueIdentifier":"gcast1"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldl1"},"qualification":null},{"reference":{"otherSlice":1777207061107267722},"usedName":{"valueIdentifier":"consTree"},"qualification":null},{"reference":{"otherSlice":7257616825183973984},"usedName":{"valueIdentifier":"size"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Int"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"=="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"&&"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"toList"},"qualification":null},{"reference":{"originalModule":"GHC.Base"},"usedName":{"valueOperator":"<$"},"qualification":null},{"reference":{"otherSlice":2148473566623462179},"usedName":{"typeName":"FingerTree","constructorIdentifier":"Empty"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Bool","constructorIdentifier":"True"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Bool","constructorIdentifier":"False"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Bool"},"qualification":null},{"reference":{"otherSlice":1534645161508955686},"usedName":{"valueIdentifier":"appendTree0"},"qualification":null},{"reference":{"originalModule":"Data.Monoid"},"usedName":{"typeIdentifier":"Monoid"},"qualification":null},{"reference":{"originalModule":"Data.Monoid"},"usedName":{"valueIdentifier":"mempty"},"qualification":null},{"reference":{"originalModule":"Data.Monoid"},"usedName":{"valueIdentifier":"mappend"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"typeIdentifier":"Alternative"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueIdentifier":"empty"},"qualification":"Applicative"},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"valueOperator":"<|>"},"qualification":"Applicative"},{"reference":{"originalModule":"Control.Monad"},"usedName":{"typeIdentifier":"MonadPlus"},"qualification":null},{"reference":{"originalModule":"Control.Monad"},"usedName":{"valueIdentifier":"mzero"},"qualification":null},{"reference":{"originalModule":"Control.Monad"},"usedName":{"valueIdentifier":"mplus"},"qualification":null},{"reference":{"originalModule":"Control.Applicative"},"usedName":{"typeIdentifier":"Applicative"},"qualification":null},{"reference":{"originalModule":"Data.Foldable"},"usedName":{"valueIdentifier":"foldl'"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Monad"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">>="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">="},"qualification":null},{"reference":{"otherSlice":8980889295492426096},"usedName":{"valueIdentifier":"applicativeTree"},"qualification":null},{"reference":{"otherSlice":7909493524980447763},"usedName":{"valueIdentifier":"runId"},"qualification":null},{"reference":{"otherSlice":7909493524980447763},"usedName":{"typeName":"Id","constructorIdentifier":"Id"},"qualification":null},{"reference":{"otherSlice":2148473566623462179},"usedName":{"typeName":"FingerTree","constructorIdentifier":"Single"},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"valueIdentifier":"showsPrec"},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"valueIdentifier":"showParen"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">"},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"valueIdentifier":"showString"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"."},"qualification":null},{"reference":{"originalModule":"Text.Show"},"usedName":{"valueIdentifier":"shows"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"compare"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"flip"},"qualification":null},{"reference":{"otherSlice":3052533278734957531},"usedName":{"valueIdentifier":"getElem"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}