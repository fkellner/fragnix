{"sliceID":7220365191463200308,"fragment":[" \nzipWith' :: (a -> b -> c) -> Seq a -> Seq b -> Seq c","zipWith' f xs ys = snd (mapAccumL k ys xs)\n  where k kys x\n          = case viewl kys of\n                (z :< zs) -> (zs, f x z)\n                EmptyL -> error \"zipWith': unexpected EmptyL\""],"usages":[{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"snd"},"qualification":null},{"reference":{"originalModule":"Data.Traversable"},"usedName":{"valueIdentifier":"mapAccumL"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"valueIdentifier":"viewl"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"typeName":"ViewL","constructorOperator":":<"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"typeName":"ViewL","constructorIdentifier":"EmptyL"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"error"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"typeIdentifier":"Seq"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}