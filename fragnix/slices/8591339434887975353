{"sliceID":8591339434887975353,"fragment":[" \nfromAscList :: Eq a => [a] -> Set a","fromAscList xs = fromDistinctAscList (combineEq xs)\n  where combineEq xs'\n          = case xs' of\n                [] -> []\n                [x] -> [x]\n                (x : xx) -> combineEq' x xx\n        combineEq' z [] = [z]\n        combineEq' z (x : xs')\n          | z == x = combineEq' z xs'\n          | otherwise = z : combineEq' x xs'"],"usages":[{"reference":{"otherSlice":764655692472321670},"usedName":{"valueIdentifier":"fromDistinctAscList"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"=="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Eq"},"qualification":null},{"reference":{"otherSlice":186780576224115314},"usedName":{"typeIdentifier":"Set"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}