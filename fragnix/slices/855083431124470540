{"sliceID":855083431124470540,"fragment":[" \nfromAscListWithKey ::\n                     Eq k => (k -> a -> a -> a) -> [(k, a)] -> Map k a","fromAscListWithKey f xs = fromDistinctAscList (combineEq f xs)\n  where combineEq _ xs'\n          = case xs' of\n                [] -> []\n                [x] -> [x]\n                (x : xx) -> combineEq' x xx\n        combineEq' z [] = [z]\n        combineEq' z@(kz, zz) (x@(kx, xx) : xs')\n          | kx == kz =\n            let yy = f kx xx zz in yy `seq` combineEq' (kx, yy) xs'\n          | otherwise = z : combineEq' x xs'"],"usages":[{"reference":{"otherSlice":2442258236480796656},"usedName":{"valueIdentifier":"fromDistinctAscList"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"=="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"seq"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Eq"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"typeIdentifier":"Map"},"qualification":null}],"language":[]}