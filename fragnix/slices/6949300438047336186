{"sliceID":6949300438047336186,"fragment":[" \ngraphFromEdges ::\n                 Ord key =>\n                 [(node, key, [key])] ->\n                   (Graph, Vertex -> (node, key, [key]), key -> Maybe Vertex)","graphFromEdges edges0 = (graph, \\ v -> vertex_map ! v, key_vertex)\n  where max_v = length edges0 - 1\n        bounds0 = (0, max_v) :: (Vertex, Vertex)\n        sorted_edges = sortBy lt edges0\n        edges1 = zipWith (,) [0 ..] sorted_edges\n        graph\n          = array bounds0\n              [(,) v (mapMaybe key_vertex ks) | (,) v (_, _, ks) <- edges1]\n        key_map = array bounds0 [(,) v k | (,) v (_, k, _) <- edges1]\n        vertex_map = array bounds0 edges1\n        lt (_, k1, _) (_, k2, _) = k1 `compare` k2\n        key_vertex k = findVertex 0 max_v\n          where findVertex a b | a > b = Nothing\n                findVertex a b\n                  = case compare k (key_map ! mid) of\n                        LT -> findVertex a (mid - 1)\n                        EQ -> Just mid\n                        GT -> findVertex (mid + 1) b\n                  where mid = (a + b) `div` 2"],"usages":[{"reference":{"originalModule":"GHC.Arr"},"usedName":{"valueOperator":"!"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"length"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"-"},"qualification":null},{"reference":{"otherSlice":3161584788727874551},"usedName":{"typeIdentifier":"Vertex"},"qualification":null},{"reference":{"originalModule":"Data.List"},"usedName":{"valueIdentifier":"sortBy"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"zipWith"},"qualification":null},{"reference":{"originalModule":"GHC.Arr"},"usedName":{"valueIdentifier":"array"},"qualification":null},{"reference":{"originalModule":"Data.Maybe"},"usedName":{"valueIdentifier":"mapMaybe"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"compare"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Maybe","constructorIdentifier":"Nothing"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Ordering","constructorIdentifier":"LT"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Ordering","constructorIdentifier":"EQ"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Maybe","constructorIdentifier":"Just"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Ordering","constructorIdentifier":"GT"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"+"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"div"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Ord"},"qualification":null},{"reference":{"otherSlice":7393939891770910900},"usedName":{"typeIdentifier":"Graph"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Maybe"},"qualification":null}],"language":["Rank2Types","Trustworthy"]}