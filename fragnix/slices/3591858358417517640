{"sliceID":3591858358417517640,"fragment":[" \niterateN :: Int -> (a -> a) -> a -> Seq a","iterateN n f x\n  | n >= 0 = replicateA n (State (\\ y -> (f y, y))) `execState` x\n  | otherwise = error \"iterateN takes a nonnegative integer argument\""],"usages":[{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">="},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"valueIdentifier":"replicateA"},"qualification":null},{"reference":{"otherSlice":404900670486479360},"usedName":{"typeName":"State","constructorIdentifier":"State"},"qualification":null},{"reference":{"otherSlice":4763112501949492000},"usedName":{"valueIdentifier":"execState"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"error"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Int"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"typeIdentifier":"Seq"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}