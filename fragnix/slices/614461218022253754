{"sliceID":614461218022253754,"fragment":[" \nfromList :: Ord k => [(k, a)] -> Map k a","fromList [] = Tip\nfromList [(kx, x)] = x `seq` Bin 1 kx x Tip Tip\nfromList ((kx0, x0) : xs0)\n  | not_ordered kx0 xs0 =\n    x0 `seq` fromList' (Bin 1 kx0 x0 Tip Tip) xs0\n  | otherwise = x0 `seq` go (1 :: Int) (Bin 1 kx0 x0 Tip Tip) xs0\n  where not_ordered _ [] = False\n        not_ordered kx ((ky, _) : _) = kx >= ky\n         \n        {-# INLINE not_ordered #-}\n        fromList' t0 xs = foldlStrict ins t0 xs\n          where ins t (k, x) = insert k x t\n        go arg _ _ | arg `seq` False = undefined\n        go _ t [] = t\n        go _ t [(kx, x)] = x `seq` insertMax kx x t\n        go s l xs@((kx, x) : xss)\n          | not_ordered kx xss = fromList' l xs\n          | otherwise =\n            case create s xss of\n                (r, ys, []) -> x `seq` go (s `shiftL` 1) (link kx x l r) ys\n                (r, _, ys) -> x `seq` fromList' (link kx x l r) ys\n        create arg _ | arg `seq` False = undefined\n        create _ [] = (Tip, [], [])\n        create s xs@(xp : xss)\n          | s == 1 =\n            case xp of\n                (kx, x) | not_ordered kx xss ->\n                          x `seq` (Bin 1 kx x Tip Tip, [], xss)\n                        | otherwise -> x `seq` (Bin 1 kx x Tip Tip, xss, [])\n          | otherwise =\n            case create (s `shiftR` 1) xs of\n                res@(_, [], _) -> res\n                (l, [(ky, y)], zs) -> y `seq` (insertMax ky y l, [], zs)\n                (l, ys@((ky, y) : yss), _) | not_ordered ky yss -> (l, [], ys)\n                                           | otherwise ->\n                                             case create (s `shiftR` 1) yss of\n                                                 (r, zs, ws) -> y `seq` (link ky y l r, zs, ws)"],"usages":[{"reference":{"otherSlice":8912391320880523566},"usedName":{"typeName":"Map","constructorIdentifier":"Tip"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"seq"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"typeName":"Map","constructorIdentifier":"Bin"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Int"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeName":"Bool","constructorIdentifier":"False"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":">="},"qualification":null},{"reference":{"otherSlice":1553206181863891259},"usedName":{"valueIdentifier":"foldlStrict"},"qualification":null},{"reference":{"otherSlice":2104474768327063925},"usedName":{"valueIdentifier":"insert"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"undefined"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"valueIdentifier":"insertMax"},"qualification":null},{"reference":{"originalModule":"Foreign.Safe"},"usedName":{"valueIdentifier":"shiftL"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"valueIdentifier":"link"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"=="},"qualification":null},{"reference":{"originalModule":"Foreign.Safe"},"usedName":{"valueIdentifier":"shiftR"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Ord"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"typeIdentifier":"Map"},"qualification":null}],"language":[]}