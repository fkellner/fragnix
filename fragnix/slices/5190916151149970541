{"sliceID":5190916151149970541,"fragment":[" \nfromAscListWithKey ::\n                     Eq k => (k -> a -> a -> a) -> [(k, a)] -> Map k a","fromAscListWithKey f xs = fromDistinctAscList (combineEq f xs)\n  where combineEq _ xs'\n          = case xs' of\n                [] -> []\n                [x] -> [x]\n                (x : xx) -> combineEq' x xx\n        combineEq' z [] = [z]\n        combineEq' z@(kz, zz) (x@(kx, xx) : xs')\n          | kx == kz = let yy = f kx xx zz in combineEq' (kx, yy) xs'\n          | otherwise = z : combineEq' x xs'"],"usages":[{"reference":{"otherSlice":5898421828110813745},"usedName":{"valueIdentifier":"fromDistinctAscList"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"=="},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"typeIdentifier":"Eq"},"qualification":null},{"reference":{"otherSlice":8912391320880523566},"usedName":{"typeIdentifier":"Map"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}