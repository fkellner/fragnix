{"sliceID":5771708843767225922,"fragment":[" \nzipWith :: (a -> b -> c) -> Seq a -> Seq b -> Seq c","zipWith f xs ys\n  | length xs <= length ys = zipWith' f xs ys\n  | otherwise = zipWith' (flip f) ys xs"],"usages":[{"reference":{"otherSlice":1628352407710261112},"usedName":{"valueIdentifier":"length"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueOperator":"<="},"qualification":null},{"reference":{"otherSlice":7220365191463200308},"usedName":{"valueIdentifier":"zipWith'"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"otherwise"},"qualification":null},{"reference":{"originalModule":"Prelude"},"usedName":{"valueIdentifier":"flip"},"qualification":null},{"reference":{"otherSlice":1628352407710261112},"usedName":{"typeIdentifier":"Seq"},"qualification":null}],"language":["DeriveDataTypeable","StandaloneDeriving","Trustworthy"]}